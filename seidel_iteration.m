% 线性方程组近似求解: 赛德尔迭代――比雅克比更快收敛!
% 思路: 雅克比迭代每次更新过程中肯定是有些先更新有些后更新的! 
%       雅克比思路为: 下一波x(i+1)完全用上一波的结果x(i)结果;
%       赛德尔思路为: 一下波x(i+1)后面的xn更新可以用的已经更新过的x(i+1)的其他值! 
%                    即: 在同一波更新中, 后更新的x用的是"已经更新过的"前面的x。
% 说明1: 雅克比迭代矩阵B2是判断收敛与否的关键! B2的谱半径(B2的绝对值最大的特征值)要小于1。
% 说明2: "雅克比迭代"与"赛德尔迭代"两者的收敛没有关系~

clear; clc;

% 关于原方程组的迭代计算必备矩阵: 不同方程每次修改A和b即可。
A = [10 -1 2 0;-1 11 -1 3;2 -1 10 -1;0 3 -1 8];  % 系数矩阵
b = [7;14;-10;12];        % 等号右边结果(列矩阵)
D = diag(diag(A));
L = tril(A,-1);     % 向左下移一格的下三角阵;
U = triu(A,1);      % 向右上移一格的上三角阵;
B2 = -inv(D+L)*U;   % 赛德尔迭代矩阵, 用来计算和判断收敛与否;

if det(A) == 0
    fprintf('系数矩阵A为奇异矩阵,无法求解!\n');
    return ;
end

radius = max(abs(eig(B2)));  % 特征值有可能为复数, abs取绝对值 + 取模
if radius > 1
    fprintf('当前迭代不收敛!\n');
    return ;
else
    fprintf('赛德尔迭代矩阵谱半径为: %.4f\n',radius);
end
    
% 迭代计算部分:
x = zeros(length(b),1);  % 初始迭代4x1的矩阵(列矩阵)
error = double(input('输入迭代精度(例如10^(-4)或0.0001):'));
count = 0;    % 迭代计数器
while 1
    tmp = B2*x + inv(D+L)*b;
    if max(abs(tmp - x)) < error
        break;
    end
    x = tmp;
    count = count + 1;
end

fprintf('方程的解为: x1 = %.4f  x2 = %.4f  x3 = %.4f  x4 = %.4f\n',x(1),x(2),x(3),x(4));
fprintf('共迭代%d次\n',count);

